/*/import React, { useState } from 'react';
import EmailSearchInput from './EmailSearch';
import { db, app } from '@/firebase_setup/firebase';
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { firestore } from 'firebase/firestore';
import TestQuery from './testquery';
import { useCollection } from "react-firebase-hooks/firestore";

const HomePage = () => {
    const handleEmailSearch = (email) => {
        // Implement your Firebase query logic here
        console.log('Searching for email:', email);
        // ...
    };

    return (
        <div>
            <h1>Search for User by Email</h1>
            <EmailSearchInput onSearch={handleEmailSearch} />
        </div>
    );
    <TestQuery />
};



export default function Home() {
// ... existing  hook code ...

const [votes, votesLoading, votesError] = useCollection(
    db.firestore().collection("Bookings"),
    {}
  );

  if (!votesLoading && votes) {
    votes.docs.map((doc) => console.log(doc.data()));
  }}/*/
  import React from 'react';
import EmailSearchInput from './EmailSearch'; // Assuming this component exists
import { db } from '@/firebase_setup/firebase'; // Import only the Firestore instance
import { useCollection } from 'react-firebase-hooks/firestore';
import { getDocs, collection } from 'firebase/firestore';

// Example usage:


// Initialize Firebase (if not already done in your firebase_setup/firebase.js)
// const app = initializeApp(firebaseConfig);

export default async function Home() {
  // ... existing hook code ...
    const querySnapshot = await getDocs(collection(db, 'Bookings'));
    const docSnapshots = votes.docs;
    for (const doc of docSnapshots) {
        const data = doc.data(); // Access the data of each document
        console.log(data);
      }
  /*/const [votes, votesLoading, votesError] = useCollection(
    db.collection('Bookings'), // Use db.collection instead of db.firestore().collection
    {}
  );

  if (!votesLoading && votes) {
    votes.docs.map((doc) => console.log(doc.data()));
  }
/*/
  // Render your components here (e.g., EmailSearchInput, TestQuery, etc.)
  return (
    <div>
      <h1>Search for User by Email</h1>
      <EmailSearchInput /> {/* Pass any necessary props */}
      {/* Add other components as needed */}
    </div>
  );
}
